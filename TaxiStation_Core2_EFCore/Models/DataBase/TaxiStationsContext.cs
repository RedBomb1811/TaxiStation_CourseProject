using Microsoft.EntityFrameworkCore;
using TaxiStation_Core2_EFCore.Models.Registrarion;
using TaxiStation_Core2_EFCore.Models.ViewModels;
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestExample.DB
{
    using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;

    public partial class TaxiStationContext : DbContext
    {
        public TaxiStationContext(DbContextOptions<TaxiStationContext> options)
            : base(options)
        {
        }
    
        public virtual DbSet<Body_types> Body_types { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Drivers> Drivers { get; set; }
        public virtual DbSet<Order_types> Order_types { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Turns> Turns { get; set; }
        public virtual DbSet<Venichles> Venichles { get; set; }
        public DbSet<TaxiStation_Core2_EFCore.Models.Registrarion.RegisterDriver> RegisterDriver { get; set; }

        //public virtual int addBody_types(string body_name)
        //{
        //    var body_nameParameter = body_name != null ?
        //        new ObjectParameter("body_name", body_name) :
        //        new ObjectParameter("body_name", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addBody_types", body_nameParameter);
        //}

        //public virtual int addDriver(string first_name, string second_name, Nullable<int> age, Nullable<bool> sex, string phone_number, string pass_number, Nullable<double> rating, string email)
        //{

        //    var first_nameParameter = first_name != null ?
        //        new ObjectParameter("first_name", first_name) :
        //        new ObjectParameter("first_name", typeof(string));

        //    var second_nameParameter = second_name != null ?
        //        new ObjectParameter("second_name", second_name) :
        //        new ObjectParameter("second_name", typeof(string));

        //    var ageParameter = age.HasValue ?
        //        new ObjectParameter("age", age) :
        //        new ObjectParameter("age", typeof(int));

        //    var sexParameter = sex.HasValue ?
        //        new ObjectParameter("sex", sex) :
        //        new ObjectParameter("sex", typeof(bool));

        //    var phone_numberParameter = phone_number != null ?
        //        new ObjectParameter("phone_number", phone_number) :
        //        new ObjectParameter("phone_number", typeof(string));

        //    var pass_numberParameter = pass_number != null ?
        //        new ObjectParameter("pass_number", pass_number) :
        //        new ObjectParameter("pass_number", typeof(string));

        //    var ratingParameter = rating.HasValue ?
        //        new ObjectParameter("rating", rating) :
        //        new ObjectParameter("rating", typeof(double));

        //    var emailParameter = email != null ?
        //        new ObjectParameter("email", email) :
        //        new ObjectParameter("email", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDriver", first_nameParameter, second_nameParameter, ageParameter, sexParameter, phone_numberParameter, pass_numberParameter, ratingParameter, emailParameter);
        //}

        //public virtual int addModels(string name)
        //{
        //    var nameParameter = name != null ?
        //        new ObjectParameter("name", name) :
        //        new ObjectParameter("name", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addModels", nameParameter);
        //}

        //public virtual int addOrder_types(string name, Nullable<double> rate)
        //{
        //    var nameParameter = name != null ?
        //        new ObjectParameter("name", name) :
        //        new ObjectParameter("name", typeof(string));

        //    var rateParameter = rate.HasValue ?
        //        new ObjectParameter("rate", rate) :
        //        new ObjectParameter("rate", typeof(double));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOrder_types", nameParameter, rateParameter);
        //}

        //public virtual int AddVenichles(string number, Nullable<bool> child, Nullable<bool> pets, string model, Nullable<int> venicle_type)
        //{
        //    var numberParameter = number != null ?
        //        new ObjectParameter("number", number) :
        //        new ObjectParameter("number", typeof(string));

        //    var childParameter = child.HasValue ?
        //        new ObjectParameter("child", child) :
        //        new ObjectParameter("child", typeof(bool));

        //    var petsParameter = pets.HasValue ?
        //        new ObjectParameter("pets", pets) :
        //        new ObjectParameter("pets", typeof(bool));

        //    var modelParameter = model != null ?
        //        new ObjectParameter("model", model) :
        //        new ObjectParameter("model", typeof(string));

        //    var venicle_typeParameter = venicle_type.HasValue ?
        //        new ObjectParameter("venicle_type", venicle_type) :
        //        new ObjectParameter("venicle_type", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVenichles", numberParameter, childParameter, petsParameter, modelParameter, venicle_typeParameter);
        //}

        //public virtual int CLR_GetCountOrderTypesPipe()
        //{
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CLR_GetCountOrderTypesPipe");
        //}

        //public virtual int ConfirmOrder(Nullable<long> id_order, Nullable<int> code)
        //{
        //    var id_orderParameter = id_order.HasValue ?
        //        new ObjectParameter("id_order", id_order) :
        //        new ObjectParameter("id_order", typeof(long));

        //    var codeParameter = code.HasValue ?
        //        new ObjectParameter("code", code) :
        //        new ObjectParameter("code", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConfirmOrder", id_orderParameter, codeParameter);
        //}

        //public virtual int DeleteOrder(Nullable<long> id_order, Nullable<int> code)
        //{
        //    var id_orderParameter = id_order.HasValue ?
        //        new ObjectParameter("id_order", id_order) :
        //        new ObjectParameter("id_order", typeof(long));

        //    var codeParameter = code.HasValue ?
        //        new ObjectParameter("code", code) :
        //        new ObjectParameter("code", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrder", id_orderParameter, codeParameter);
        //}

        //public virtual int MakeOrder(string id_client, Nullable<int> id_order_type, Nullable<double> start_point_lat, Nullable<double> start_point_long, Nullable<double> end_point_lat, Nullable<double> end_point_long, Nullable<bool> child, Nullable<bool> pets, ObjectParameter id_order, ObjectParameter sec_code)
        //{
        //    var id_clientParameter = id_client != null ?
        //        new ObjectParameter("id_client", id_client) :
        //        new ObjectParameter("id_client", typeof(string));

        //    var id_order_typeParameter = id_order_type.HasValue ?
        //        new ObjectParameter("id_order_type", id_order_type) :
        //        new ObjectParameter("id_order_type", typeof(int));

        //    var start_point_latParameter = start_point_lat.HasValue ?
        //        new ObjectParameter("start_point_lat", start_point_lat) :
        //        new ObjectParameter("start_point_lat", typeof(double));

        //    var start_point_longParameter = start_point_long.HasValue ?
        //        new ObjectParameter("start_point_long", start_point_long) :
        //        new ObjectParameter("start_point_long", typeof(double));

        //    var end_point_latParameter = end_point_lat.HasValue ?
        //        new ObjectParameter("end_point_lat", end_point_lat) :
        //        new ObjectParameter("end_point_lat", typeof(double));

        //    var end_point_longParameter = end_point_long.HasValue ?
        //        new ObjectParameter("end_point_long", end_point_long) :
        //        new ObjectParameter("end_point_long", typeof(double));

        //    var childParameter = child.HasValue ?
        //        new ObjectParameter("child", child) :
        //        new ObjectParameter("child", typeof(bool));

        //    var petsParameter = pets.HasValue ?
        //        new ObjectParameter("pets", pets) :
        //        new ObjectParameter("pets", typeof(bool));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeOrder", id_clientParameter, id_order_typeParameter, start_point_latParameter, start_point_longParameter, end_point_latParameter, end_point_longParameter, childParameter, petsParameter, id_order, sec_code);
        //}

        //public virtual ObjectResult<NotAcceptedOrdersForDriver_Result> NotAcceptedOrdersForDriver(Nullable<long> id_turns)
        //{
        //    var id_turnsParameter = id_turns.HasValue ?
        //        new ObjectParameter("id_turns", id_turns) :
        //        new ObjectParameter("id_turns", typeof(long));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NotAcceptedOrdersForDriver_Result>("NotAcceptedOrdersForDriver", id_turnsParameter);
        //}

        //public virtual int RegisterClient(string id_phone_number)
        //{
        //    var id_phone_numberParameter = id_phone_number != null ?
        //        new ObjectParameter("id_phone_number", id_phone_number) :
        //        new ObjectParameter("id_phone_number", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterClient", id_phone_numberParameter);
        //}

        public virtual int RegisterDriverFromNumber(string phone_number, string pass_hash, string first_name, string second_name, Nullable<System.DateTime> birth_date, Nullable<bool> sex_male, string pass_number, string email)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@phone_number", phone_number));
            parametrs.Add(new SqlParameter("@pass_hash", pass_hash));
            parametrs.Add(new SqlParameter("@first_name", first_name));
            parametrs.Add(new SqlParameter("@second_name", second_name));
            parametrs.Add(new SqlParameter("@birth_date", birth_date));
            parametrs.Add(new SqlParameter("@sex_male", sex_male));
            parametrs.Add(new SqlParameter("@pass_number", pass_number));
            parametrs.Add(new SqlParameter("@email", email));
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@sec_code",
                SqlDbType = SqlDbType.Int,
                Direction = ParameterDirection.Output,
            });

            this.Database.ExecuteSqlCommand("RegisterDriverFromNumber " +
                "@phone_number, " +
                "@pass_hash, " +
                "@first_name, " +
                "@second_name," +
                "@birth_date," +
                "@sex_male," +
                "@pass_number," +
                "@email," +
                "@sec_code OUT", parametrs);
            return (int)(parametrs[parametrs.Count-1].Value);
        }

        public virtual int ConfirmDriver(string phone_driver, Nullable<int> code)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@phone_driver", phone_driver));
            parametrs.Add(new SqlParameter("@code", code));

            return Database.ExecuteSqlCommand("ConfirmDriver " +
                "@phone_driver, " +
                "@code", parametrs);
        }

        public DbSet<TaxiStation_Core2_EFCore.Models.ViewModels.MakeOrder> MakeOrder { get; set; }
    }
}
