using Microsoft.EntityFrameworkCore;
using TaxiStation_Core2_EFCore.Models.Registrarion;
using TaxiStation_Core2_EFCore.Models.ViewModels;
using TestExample.DB;
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestExample.DB
{
    using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;

    public partial class TaxiStationContext : DbContext
    {
        public TaxiStationContext(DbContextOptions<TaxiStationContext> options)
            : base(options) { }

        public virtual DbSet<Body_types> Body_types { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<Drivers> Drivers { get; set; }
        public virtual DbSet<Order_types> Order_types { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Turns> Turns { get; set; }
        public virtual DbSet<Venichles> Venichles { get; set; }

        //public DbSet<TaxiStation_Core2_EFCore.Models.Registrarion.RegisterDriver> RegisterDriver { get; set; }

        //public virtual int addBody_types(string body_name)
        //{
        //    var body_nameParameter = body_name != null ?
        //        new ObjectParameter("body_name", body_name) :
        //        new ObjectParameter("body_name", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addBody_types", body_nameParameter);
        //}

        //public virtual int addDriver(string first_name, string second_name, Nullable<int> age, Nullable<bool> sex, string phone_number, string pass_number, Nullable<double> rating, string email)
        //{

        //    var first_nameParameter = first_name != null ?
        //        new ObjectParameter("first_name", first_name) :
        //        new ObjectParameter("first_name", typeof(string));

        //    var second_nameParameter = second_name != null ?
        //        new ObjectParameter("second_name", second_name) :
        //        new ObjectParameter("second_name", typeof(string));

        //    var ageParameter = age.HasValue ?
        //        new ObjectParameter("age", age) :
        //        new ObjectParameter("age", typeof(int));

        //    var sexParameter = sex.HasValue ?
        //        new ObjectParameter("sex", sex) :
        //        new ObjectParameter("sex", typeof(bool));

        //    var phone_numberParameter = phone_number != null ?
        //        new ObjectParameter("phone_number", phone_number) :
        //        new ObjectParameter("phone_number", typeof(string));

        //    var pass_numberParameter = pass_number != null ?
        //        new ObjectParameter("pass_number", pass_number) :
        //        new ObjectParameter("pass_number", typeof(string));

        //    var ratingParameter = rating.HasValue ?
        //        new ObjectParameter("rating", rating) :
        //        new ObjectParameter("rating", typeof(double));

        //    var emailParameter = email != null ?
        //        new ObjectParameter("email", email) :
        //        new ObjectParameter("email", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDriver", first_nameParameter, second_nameParameter, ageParameter, sexParameter, phone_numberParameter, pass_numberParameter, ratingParameter, emailParameter);
        //}

        //public virtual int addModels(string name)
        //{
        //    var nameParameter = name != null ?
        //        new ObjectParameter("name", name) :
        //        new ObjectParameter("name", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addModels", nameParameter);
        //}

        //public virtual int addOrder_types(string name, Nullable<double> rate)
        //{
        //    var nameParameter = name != null ?
        //        new ObjectParameter("name", name) :
        //        new ObjectParameter("name", typeof(string));

        //    var rateParameter = rate.HasValue ?
        //        new ObjectParameter("rate", rate) :
        //        new ObjectParameter("rate", typeof(double));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOrder_types", nameParameter, rateParameter);
        //}

        //public virtual int AddVenichles(string number, Nullable<bool> child, Nullable<bool> pets, string model, Nullable<int> venicle_type)
        //{
        //    var numberParameter = number != null ?
        //        new ObjectParameter("number", number) :
        //        new ObjectParameter("number", typeof(string));

        //    var childParameter = child.HasValue ?
        //        new ObjectParameter("child", child) :
        //        new ObjectParameter("child", typeof(bool));

        //    var petsParameter = pets.HasValue ?
        //        new ObjectParameter("pets", pets) :
        //        new ObjectParameter("pets", typeof(bool));

        //    var modelParameter = model != null ?
        //        new ObjectParameter("model", model) :
        //        new ObjectParameter("model", typeof(string));

        //    var venicle_typeParameter = venicle_type.HasValue ?
        //        new ObjectParameter("venicle_type", venicle_type) :
        //        new ObjectParameter("venicle_type", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVenichles", numberParameter, childParameter, petsParameter, modelParameter, venicle_typeParameter);
        //}

        //public virtual int CLR_GetCountOrderTypesPipe()
        //{
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CLR_GetCountOrderTypesPipe");
        //}

        //public virtual int DeleteOrder(Nullable<long> id_order, Nullable<int> code)
        //{
        //    var id_orderParameter = id_order.HasValue ?
        //        new ObjectParameter("id_order", id_order) :
        //        new ObjectParameter("id_order", typeof(long));

        //    var codeParameter = code.HasValue ?
        //        new ObjectParameter("code", code) :
        //        new ObjectParameter("code", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrder", id_orderParameter, codeParameter);
        //}

        //public virtual int RegisterClient(string id_phone_number)
        //{
        //    var id_phone_numberParameter = id_phone_number != null ?
        //        new ObjectParameter("id_phone_number", id_phone_number) :
        //        new ObjectParameter("id_phone_number", typeof(string));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterClient", id_phone_numberParameter);
        //}

        public virtual int RegisterDriverFromNumber(string phone_number, string pass_hash, string first_name, string second_name, System.DateTime birth_date, bool sex_male, string pass_number, string email)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@phone_number", phone_number));
            parametrs.Add(new SqlParameter("@pass_hash", pass_hash));
            parametrs.Add(new SqlParameter("@first_name", first_name));
            parametrs.Add(new SqlParameter("@second_name", second_name));
            parametrs.Add(new SqlParameter("@birth_date", birth_date));
            parametrs.Add(new SqlParameter("@sex_male", sex_male));
            parametrs.Add(new SqlParameter("@pass_number", pass_number));
            parametrs.Add(new SqlParameter("@email", email));
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@sec_code",
                SqlDbType = SqlDbType.Int,
                Direction = ParameterDirection.Output,
            });

            this.Database.ExecuteSqlCommand("RegisterDriverFromNumber " +
                "@phone_number, " +
                "@pass_hash, " +
                "@first_name, " +
                "@second_name," +
                "@birth_date," +
                "@sex_male," +
                "@pass_number," +
                "@email," +
                "@sec_code OUT", parametrs);
            return (int)(parametrs[parametrs.Count-1].Value);
        }

        public virtual int ConfirmDriver(string phone_driver, Nullable<int> code)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@phone_driver", phone_driver));
            parametrs.Add(new SqlParameter("@code", code));

            return Database.ExecuteSqlCommand("ConfirmDriver " +
                "@phone_driver, " +
                "@code", parametrs);
        }

        public virtual int MakeOrder(string id_client, int id_order_type, double start_point_lat, double start_point_long, 
            double end_point_lat, double end_point_long, bool child, bool pets)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_client", id_client));
            parametrs.Add(new SqlParameter("@id_order_type", id_order_type));
            parametrs.Add(new SqlParameter("@start_point_lat", start_point_lat));
            parametrs.Add(new SqlParameter("@start_point_long", start_point_long));
            parametrs.Add(new SqlParameter("@end_point_lat", end_point_lat));
            parametrs.Add(new SqlParameter("@end_point_long", end_point_long));
            parametrs.Add(new SqlParameter("@child", child));
            parametrs.Add(new SqlParameter("@pets", pets));
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@id_order",
                SqlDbType = SqlDbType.Int,
                Direction = ParameterDirection.Output,
            });
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@sec_code",
                SqlDbType = SqlDbType.Int,
                Direction = ParameterDirection.Output,
            });

            this.Database.ExecuteSqlCommand("MakeOrder " +
                "@id_client, " +
                "@id_order_type, " +
                "@start_point_lat, " +
                "@start_point_long," +
                "@end_point_lat," +
                "@end_point_long," +
                "@child," +
                "@pets," +
                "@id_order OUT," +
                "@sec_code OUT", parametrs);
            return (int)(parametrs[parametrs.Count - 2].Value);
        }

        public virtual int ConfirmOrder(long id_order, int code)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_order", id_order));
            parametrs.Add(new SqlParameter("@code", code));

            return Database.ExecuteSqlCommand("ConfirmOrder " +
                "@id_order, " +
                "@code", parametrs);
        }

        public virtual IEnumerable<NotAcceptedOrdersForDriver_Result> NotAcceptedOrdersForDriver(string id_driver)
        {
            List<NotAcceptedOrdersForDriver_Result> list = new List<NotAcceptedOrdersForDriver_Result>();
            using (var command = Database.GetDbConnection().CreateCommand()) {
                command.CommandText = "NotAcceptedOrdersForDriver";
                command.CommandType = System.Data.CommandType.StoredProcedure;

                var param_id_turns = command.CreateParameter();
                param_id_turns.ParameterName = "id_driver";
                param_id_turns.Value = id_driver;
                command.Parameters.Add(param_id_turns);

                Database.OpenConnection();
                using (var result = command.ExecuteReader())
                {
                    if (result.HasRows)
                    {
                        while (result.Read())
                        {
                            list.Add(new NotAcceptedOrdersForDriver_Result()
                            {
                                order_id = result.GetInt64(0),
                                id_client = result.GetString(1),
                                rating = result.GetDouble(2),
                                date_start_order = result.GetDateTime(3),
                                order_type = result.GetInt32(4),
                                order_type_name = result.GetString(5),
                                start_point_lat = result.GetDouble(6),
                                start_point_long = result.GetDouble(7),
                                end_point_lat = result.GetDouble(8),
                                end_point_long = result.GetDouble(9),
                                child = result.GetBoolean(10),
                                pets = result.GetBoolean(11)
                            });
                        }
                    }
                }
                return list;
            }
        }

        public virtual int StartTurn(string id_driver, int id_vehicle)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_driver", id_driver));
            parametrs.Add(new SqlParameter("@id_vehicle", id_vehicle));

            return Database.ExecuteSqlCommand("StartTurn " +
                "@id_driver, " +
                "@id_vehicle", parametrs);
        }

        public virtual int EndTurn(string id_driver)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_driver", id_driver));

            return Database.ExecuteSqlCommand("EndTurn " +
                "@id_driver", parametrs);
        }

        public virtual long GetActiveTurnForDriver(string id_driver)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_driver", id_driver));
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@id_turn",
                SqlDbType = SqlDbType.BigInt,
                Direction = ParameterDirection.Output,
            });

            this.Database.ExecuteSqlCommand("GetActiveTurnForDriver " +
                "@id_driver, " +
                "@id_turn OUT", parametrs);
            return (int)(parametrs[parametrs.Count - 1].Value);
        }

        public virtual long GetActiveOrderForClient(string id_driver)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_client", id_driver));
            parametrs.Add(new SqlParameter
            {
                ParameterName = "@id_order",
                SqlDbType = SqlDbType.BigInt,
                Direction = ParameterDirection.Output,
            });

            this.Database.ExecuteSqlCommand("GetActiveOrderForClient " +
                "@id_client, " +
                "@id_order OUT", parametrs);
            return (int)(parametrs[parametrs.Count - 1].Value);
        }

        public virtual int AcceptOrder(string id_driver, long id_order)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_driver", id_driver));
            parametrs.Add(new SqlParameter("@id_order", id_order));

            return Database.ExecuteSqlCommand("AcceptOrder " +
                "@id_driver, " +
                "@id_order", parametrs);
        }

        public virtual int DriverConfirmEnd(string id_driver, long id_order)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_driver", id_driver));
            parametrs.Add(new SqlParameter("@id_order", id_order));

            return Database.ExecuteSqlCommand("DriverConfirmEnd " +
                "@id_driver, " +
                "@id_order", parametrs);
        }

        public virtual int ClientConfirmEnd(long id_order, int sec_code)
        {
            List<SqlParameter> parametrs = new List<SqlParameter>();
            parametrs.Add(new SqlParameter("@id_order", id_order));
            parametrs.Add(new SqlParameter("@sec_code", sec_code));

            return Database.ExecuteSqlCommand("ClientConfirmEnd " +
                "@sec_code, " +
                "@id_order", parametrs);
        }

        public virtual AcceptedOrderInfoForClient AcceptedOrderInfoForClientProc(long id_order, int sec_code)
        {
            AcceptedOrderInfoForClient order = null;
            using (var command = Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = "AcceptedOrderInfoForClientProc";
                command.CommandType = System.Data.CommandType.StoredProcedure;

                var param_id_turns = command.CreateParameter();
                param_id_turns.ParameterName = "id_order";
                param_id_turns.Value = id_order;
                command.Parameters.Add(param_id_turns);

                var param_sec_code = command.CreateParameter();
                param_sec_code.ParameterName = "sec_code";
                param_sec_code.Value = sec_code;
                command.Parameters.Add(param_sec_code);

                Database.OpenConnection();
                using (var result = command.ExecuteReader())
                {
                    if (result.HasRows)
                    {
                        while (result.Read())
                        {
                            order = new AcceptedOrderInfoForClient()
                            {
                                order_id = result.GetInt64(0),
                                id_client = result.GetString(1),
                                date_start_order = result.GetDateTime(2),
                                name = result.GetString(3),
                                rate = result.GetDouble(4),
                                start_point_lat = result.GetDouble(5),
                                start_point_long = result.GetDouble(6),
                                end_point_lat = result.GetDouble(7),
                                end_point_long = result.GetDouble(8),
                                child = result.GetBoolean(9),
                                pets = result.GetBoolean(10),
                                driver_id = result.GetString(11),
                                driver_name = result.GetString(12),
                                rating = result.GetDouble(13),
                                model = result.GetString(14),
                                number = result.GetString(15)
                            };
                        }
                    }
                }
                return order;
            }
        }
    }
}
